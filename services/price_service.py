import asyncio
import time
from tradingview_ta import TA_Handler
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class PriceService:
    def __init__(self, screener, exchange):
        self.screener = screener
        self.exchange = exchange
        self.interval = '1d'
        self.cache = {}
        self.cache_ttl = 300

    def _get_cache_key(self, symbol):
        return f"{self.screener}:{self.exchange}:{symbol}"

    def _get_from_cache(self, symbol):
        cache_key = self._get_cache_key(symbol)
        if cache_key in self.cache:
            data, timestamp = self.cache[cache_key]
            if time.time() - timestamp < self.cache_ttl:
                logger.info(f"‚úì –î–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –¥–ª—è {symbol}")
                return data
        return None

    def _save_to_cache(self, symbol, price):
        cache_key = self._get_cache_key(symbol)
        self.cache[cache_key] = (price, time.time())
        logger.info(f"‚úì –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à –¥–ª—è {symbol}")

    def _get_price_from_api(self, symbol):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å TradingView TA"""
        try:
            price = TA_Handler(
                symbol=symbol,
                screener=self.screener,
                exchange=self.exchange,
                interval=self.interval
            )
            price_data = price.get_analysis()
            return price_data
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ API –¥–ª—è {symbol}: {e}")
            return None

    async def get_price(self, symbol):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã"""
        cached_price = self._get_from_cache(symbol)
        if cached_price is not None:
            return cached_price

        try:
            logger.info(f"üîÑ –ó–∞–ø—Ä–æ—Å –∫ API –¥–ª—è {symbol}...")
            loop = asyncio.get_event_loop()
            current_price = await loop.run_in_executor(None, self._get_price_from_api, symbol)

            if current_price is not None:
                self._save_to_cache(symbol, current_price)
                return current_price
            return None

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ get_price –¥–ª—è {symbol}: {e}")
            return None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —Å–µ—Ä–≤–∏—Å–æ–≤
crypto_service = PriceService('crypto', 'BINANCE')
forex_service = PriceService('forex', 'FX_IDC')

# ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è main —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    data = await crypto_service.get_price('BTCUSDT')
    if data:
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print(f"–¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: {data.indicators.get('close')}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    asyncio.run(main())