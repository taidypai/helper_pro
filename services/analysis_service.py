import pytz
import asyncio
import datetime
from typing import Dict, Optional, List, Tuple
import logging
import aiohttp

from config import bot
from services.price_service import price_service
from services.time_utils import timeframe_manager, time_service, logger, timezone_service
from services.progress_service import progress_service

logger = logging.getLogger(__name__)

# models.py
from dataclasses import dataclass
from typing import Optional

@dataclass
class Candle:
    open: float
    high: float
    low: float
    close: float
    volume: float
    timestamp: int
    
    @property
    def color(self) -> str:
        return 'green' if self.close > self.open else 'red'
    
    @property
    def body_size(self) -> float:
        return abs(self.close - self.open)
    
    @property
    def total_size(self) -> float:
        return self.high - self.low
    
    @property
    def upper_wick(self) -> float:
        return self.high - max(self.open, self.close)
    
    @property
    def lower_wick(self) -> float:
        return min(self.open, self.close) - self.low
    
    @property
    def body_mid(self) -> float:
        return (self.open + self.close) / 2
    
    @property
    def range_mid(self) -> float:
        return (self.high + self.low) / 2

@dataclass
class Imbalance:
    high: float
    low: float
    type: str  # 'buy' or 'sell'
    
    @property
    def size(self) -> float:
        return self.high - self.low
    
    @property
    def mid_price(self) -> float:
        return (self.high + self.low) / 2
    
    @property
    def recommendation(self) -> str:
        return f"–õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –≤ –∑–æ–Ω–µ: {self.mid_price:.2f}"
    
class AnalysisService:
    def __init__(self, price_service, time_service, timeframe_manager):
        self.price_service = price_service
        self.time_service = time_service
        self.timeframe_manager = timeframe_manager
        self.user_tasks: Dict[int, asyncio.Task] = {}
        self.candle_history: Dict[int, Dict[str, List[Candle]]] = {}
        self.active_analyses: Dict[int, bool] = {}
        self.found_imbalances: Dict[int, Dict[str, List[Imbalance]]] = {}

    async def safe_send_message(self, chat_id: int, text: str, parse_mode: Optional[str] = None) -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            await bot.send_message(chat_id=chat_id, text=text, parse_mode=parse_mode)
            await asyncio.sleep(2)
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False

    def analyze_order_block(self, prev_candle: Candle, current_candle: Candle) -> Optional[str]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–≤–µ —Å–≤–µ—á–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—Ä–¥–µ—Ä–±–ª–æ–∫–∞ –ø–æ –≤–∞—à–∏–º –ø—Ä–∞–≤–∏–ª–∞–º:
        1. –°–≤–µ—á–∏ —Ä–∞–∑–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
        2. –í—Ç–æ—Ä–∞—è —Å–≤–µ—á–∞ –≤ 2+ —Ä–∞–∑–∞ –±–æ–ª—å—à–µ –ø–µ—Ä–≤–æ–π
        """
        if (prev_candle is None or current_candle is None or
            prev_candle.body_size == 0 or current_candle.body_size == 0):
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –æ—Ä–¥–µ—Ä–±–ª–æ–∫–∞
        if (prev_candle.color != current_candle.color and  # –†–∞–∑–Ω—ã–π —Ü–≤–µ—Ç
            current_candle.body_size >= prev_candle.body_size * 2):  # –í 2+ —Ä–∞–∑–∞ –±–æ–ª—å—à–µ
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ä–¥–µ—Ä–±–ª–æ–∫–∞
            if current_candle.color == 'green':
                return 'buy'  # –ó–µ–ª–µ–Ω—ã–π –æ—Ä–¥–µ—Ä–±–ª–æ–∫ (–±—ã—á–∏–π)
            else:
                return 'sell' # –ö—Ä–∞—Å–Ω—ã–π –æ—Ä–¥–µ—Ä–±–ª–æ–∫ (–º–µ–¥–≤–µ–∂–∏–π)
        
        return None

    def find_imbalance(self, prev_candle: Candle, current_candle: Candle) -> Optional[Imbalance]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –∏–º–±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –¥–≤—É–º—è —Å–≤–µ—á–∞–º–∏
        –ò–º–±–∞–ª–∞–Ω—Å - —ç—Ç–æ —Ä–∞–∑—Ä—ã–≤ –º–µ–∂–¥—É —Å–≤–µ—á–∞–º–∏
        """
        if prev_candle is None or current_candle is None:
            return None
        
        # –ë—ã—á–∏–π –∏–º–±–∞–ª–∞–Ω—Å (–∑–µ–ª–µ–Ω–∞—è —Å–≤–µ—á–∞ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞–µ—Ç –∫—Ä–∞—Å–Ω—É—é)
        if (prev_candle.color == 'red' and current_candle.color == 'green' and
            current_candle.low > prev_candle.high):
            return Imbalance(
                high=current_candle.low,
                low=prev_candle.high,
                type='buy'
            )
        
        # –ú–µ–¥–≤–µ–∂–∏–π –∏–º–±–∞–ª–∞–Ω—Å (–∫—Ä–∞—Å–Ω–∞—è —Å–≤–µ—á–∞ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞–µ—Ç –∑–µ–ª–µ–Ω—É—é)
        if (prev_candle.color == 'green' and current_candle.color == 'red' and
            current_candle.high < prev_candle.low):
            return Imbalance(
                high=prev_candle.low,
                low=current_candle.high,
                type='sell'
            )
        
        # –ò–º–±–∞–ª–∞–Ω—Å –≤–Ω—É—Ç—Ä–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (—Ç–µ–∫—É—â–∞—è —Å–≤–µ—á–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â—É—é)
        if (current_candle.low > prev_candle.high or 
            current_candle.high < prev_candle.low):
            
            if current_candle.color == 'green':
                imbalance_type = 'buy'
                imbalance_high = min(current_candle.low, prev_candle.high)
                imbalance_low = max(current_candle.low, prev_candle.high)
            else:
                imbalance_type = 'sell'
                imbalance_high = min(current_candle.high, prev_candle.low)
                imbalance_low = max(current_candle.high, prev_candle.low)
            
            return Imbalance(
                high=imbalance_high,
                low=imbalance_low,
                type=imbalance_type
            )
        
        return None

    def create_order_block_message(self, symbol: str, signal: str, timeframe: str, 
                                 candles: List[Candle], imbalance: Optional[Imbalance] = None) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ä–¥–µ—Ä–±–ª–æ–∫–µ —Å –∏–º–±–∞–ª–∞–Ω—Å–æ–º"""
        prev, current = candles
        
        direction = "üü¢ –ü–û–ö–£–ü–ö–ê" if signal == 'buy' else "üî¥ –ü–†–û–î–ê–ñ–ê"
        block_type = "–ë—ã—á–∏–π –æ—Ä–¥–µ—Ä–±–ª–æ–∫" if signal == 'buy' else "–ú–µ–¥–≤–µ–∂–∏–π –æ—Ä–¥–µ—Ä–±–ª–æ–∫"
        size_ratio = current.body_size / prev.body_size
        
        message = (
            f"*{symbol} - {block_type}* \n"
            f"‚Ä¢ –°–∏–≥–Ω–∞–ª: {direction}\n"
            f"‚Ä¢ –¢–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}\n"
            f"‚Ä¢ –†–∞–∑–º–µ—Ä —Å–≤–µ—á–∏ 1: {prev.body_size:.2f}\n"
            f"‚Ä¢ –†–∞–∑–º–µ—Ä —Å–≤–µ—á–∏ 2: {current.body_size:.2f} (x{size_ratio:.1f})\n"
            f"‚Ä¢ –¶–≤–µ—Ç–∞: {prev.color.upper()} ‚Üí {current.color.upper()}\n"
            f"‚Ä¢ –¶–µ–Ω–∞: {current.close:.2f}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.datetime.now().strftime('%H:%M:%S')}\n"
            f"‚Ä¢ –î–∞—Ç–∞: {datetime.datetime.now().strftime('%d.%m.%Y')}\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–º–±–∞–ª–∞–Ω—Å–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if imbalance:
            message += (
                f"\n*–ò–ú–ë–ê–õ–ê–ù–° –û–ë–ù–ê–†–£–ñ–ï–ù* \n"
                f"‚Ä¢ –¢–∏–ø: {'–ë—ã—á–∏–π' if imbalance.type == 'buy' else '–ú–µ–¥–≤–µ–∂–∏–π'}\n"
                f"‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω: {imbalance.low:.2f} - {imbalance.high:.2f}\n"
                f"‚Ä¢ –†–∞–∑–º–µ—Ä –∏–º–±–∞–ª–∞–Ω—Å–∞: {imbalance.size:.2f}\n"
                f"‚Ä¢ *–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –∑–æ–Ω–∞ –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞:* {imbalance.mid_price:.2f}\n"
                f"‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –∏–º–±–∞–ª–∞–Ω—Å–∞\n"
            )
        
        message += (
            f"\n *–í–ù–ò–ú–ê–ù–ò–ï:* –≠—Ç–æ —Ç–æ–ª—å–∫–æ —Å–∏–≥–Ω–∞–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑!"
        )
        
        return message

    async def get_candle_data(self, symbol: str, timeframe: str) -> Optional[Candle]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Å–≤–µ—á–∏"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π price_service –∏–ª–∏ Binance API
            ohlc_data = await self.price_service.get_binance_ohlc_async(symbol, timeframe)
            if ohlc_data:
                return Candle(
                    open=float(ohlc_data['open']),
                    high=float(ohlc_data['high']),
                    low=float(ohlc_data['low']),
                    close=float(ohlc_data['close']),
                    volume=float(ohlc_data['volume']),
                    timestamp=ohlc_data['timestamp']
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–∏ {symbol}: {e}")
        
        return None

    async def initialize_candle_history(self, user_id: int, symbols: List[str], timeframe: str):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–≤–µ—á–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.candle_history:
            self.candle_history[user_id] = {}
        if user_id not in self.found_imbalances:
            self.found_imbalances[user_id] = {}
        
        for symbol in symbols:
            if symbol not in self.candle_history[user_id]:
                self.candle_history[user_id][symbol] = []
                self.found_imbalances[user_id][symbol] = []
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–≤–µ—á–∏ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
                for _ in range(3):
                    candle = await self.get_candle_data(symbol, timeframe)
                    if candle:
                        self.candle_history[user_id][symbol].append(candle)
                
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.candle_history[user_id][symbol])} —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")

    async def analyze_candles_with_progress(self, user_id: int):
        """–ê–Ω–∞–ª–∏–∑ —Å–≤–µ—á–µ–π –Ω–∞ –æ—Ä–¥–µ—Ä–±–ª–æ–∫–∏ –∏ –∏–º–±–∞–ª–∞–Ω—Å—ã —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º"""
        try:
            timeframe = self.timeframe_manager.get_timeframe()
            if not timeframe:
                await self.safe_send_message(user_id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!")
                return
            
            symbols = ['BTCUSDT', 'ETHUSDT']
            self.active_analyses[user_id] = True
            
            logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –æ—Ä–¥–µ—Ä–±–ª–æ–∫–æ–≤ –∏ –∏–º–±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è user {user_id}, TF: {timeframe}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–≤–µ—á–µ–π
            await self.initialize_candle_history(user_id, symbols, timeframe)
            
            while self.active_analyses.get(user_id, False):
                if asyncio.current_task().cancelled():
                    break
                
                # –ñ–¥–µ–º –≤—Ä–µ–º—è –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–∏
                wait_time, close_time = await self.time_service.get_time_to_candle_close(timeframe)
                
                if wait_time > 0:
                    logger.info(f"–ñ–¥–µ–º {wait_time} —Å–µ–∫ –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–∏ {timeframe}")
                    await progress_service.start_progress_animation(
                        user_id, wait_time, timeframe, close_time
                    )
                    await asyncio.sleep(wait_time)
                    await progress_service.stop_progress_animation(user_id)
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Å–≤–µ—á–∏ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è
                new_candles = {}
                for symbol in symbols:
                    candle = await self.get_candle_data(symbol, timeframe)
                    if candle:
                        new_candles[symbol] = candle
                
                if not new_candles:
                    logger.warning("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π")
                    await asyncio.sleep(5)
                    continue
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –ø–∞—Ä—É –Ω–∞ –æ—Ä–¥–µ—Ä–±–ª–æ–∫–∏ –∏ –∏–º–±–∞–ª–∞–Ω—Å—ã
                for symbol in symbols:
                    if symbol in new_candles and symbol in self.candle_history[user_id]:
                        new_candle = new_candles[symbol]
                        history = self.candle_history[user_id][symbol]
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å–≤–µ—á—É –≤ –∏—Å—Ç–æ—Ä–∏—é
                        history.append(new_candle)
                        
                        # –î–µ—Ä–∂–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–≤–µ—á–∏
                        if len(history) > 3:
                            history = history[-3:]
                            self.candle_history[user_id][symbol] = history
                        
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–≤–µ—á–∏
                        if len(history) >= 2:
                            prev_candle, current_candle = history[-2], history[-1]
                            
                            # –ò—â–µ–º –æ—Ä–¥–µ—Ä–±–ª–æ–∫
                            signal = self.analyze_order_block(prev_candle, current_candle)
                            
                            # –ò—â–µ–º –∏–º–±–∞–ª–∞–Ω—Å
                            imbalance = self.find_imbalance(prev_candle, current_candle)
                            
                            if imbalance:
                                logger.info(f"‚ö° –ù–∞–π–¥–µ–Ω –∏–º–±–∞–ª–∞–Ω—Å {symbol}: {imbalance.type}")
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∏–º–±–∞–ª–∞–Ω—Å
                                self.found_imbalances[user_id][symbol].append(imbalance)
                            
                            if signal:
                                logger.info(f"üéØ –ù–∞–π–¥–µ–Ω –æ—Ä–¥–µ—Ä–±–ª–æ–∫ {symbol}: {signal}")
                                
                                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–º–±–∞–ª–∞–Ω—Å –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
                                last_imbalance = None
                                if self.found_imbalances[user_id][symbol]:
                                    last_imbalance = self.found_imbalances[user_id][symbol][-1]
                                
                                message = self.create_order_block_message(
                                    symbol, signal, timeframe, [prev_candle, current_candle], last_imbalance
                                )
                                await self.safe_send_message(user_id, message, parse_mode="Markdown")
                                
                                # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–±–ª–æ–∫–∞
                                self.active_analyses[user_id] = False
                                break
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ü–∏–∫–ª–æ–º
                await asyncio.sleep(2)
                    
        except asyncio.CancelledError:
            logger.info(f"‚èπÔ∏è –ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è user {user_id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–Ω–∞–ª–∏–∑–µ –æ—Ä–¥–µ—Ä–±–ª–æ–∫–æ–≤ –∏ –∏–º–±–∞–ª–∞–Ω—Å–æ–≤: {e}")
            await self.safe_send_message(user_id, 
                "*–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞*\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–Ω–æ–≤–∞",
                parse_mode="Markdown"
            )
        finally:
            # –ß–∏—Å—Ç–∏–º –∑–∞ —Å–æ–±–æ–π
            if user_id in self.user_tasks:
                del self.user_tasks[user_id]
            if user_id in self.candle_history:
                del self.candle_history[user_id]
            if user_id in self.active_analyses:
                del self.active_analyses[user_id]
            if user_id in self.found_imbalances:
                del self.found_imbalances[user_id]
            await progress_service.stop_progress_animation(user_id)

    def stop_analysis(self, user_id: int):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.active_analyses[user_id] = False
        if user_id in self.user_tasks:
            self.user_tasks[user_id].cancel()
        logger.info(f"‚èπÔ∏è –ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –∫–æ–º–∞–Ω–¥–µ –¥–ª—è user {user_id}")

    async def get_imbalance_recommendation(self, user_id: int, symbol: str) -> Optional[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –∏–º–±–∞–ª–∞–Ω—Å—É"""
        if (user_id in self.found_imbalances and 
            symbol in self.found_imbalances[user_id] and 
            self.found_imbalances[user_id][symbol]):
            
            last_imbalance = self.found_imbalances[user_id][symbol][-1]
            return (
                f"*–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –∏–º–±–∞–ª–∞–Ω—Å—É {symbol}:*\n"
                f"‚Ä¢ –¢–∏–ø: {'–ë—ã—á–∏–π' if last_imbalance.type == 'buy' else '–ú–µ–¥–≤–µ–∂–∏–π'}\n"
                f"‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω: {last_imbalance.low:.2f} - {last_imbalance.high:.2f}\n"
                f"‚Ä¢ *–õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä:* {last_imbalance.mid_price:.2f}\n"
                f"‚Ä¢ –†–∞–∑–º–µ—Ä –∏–º–±–∞–ª–∞–Ω—Å–∞: {last_imbalance.size:.2f}"
            )
        return None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
analysis_service = AnalysisService(price_service, time_service, timeframe_manager)