import pytz
import asyncio
import datetime
from typing import Dict, Optional, Tuple
import logging

from config import bot
from services.price_service import price_service
from services.time_utils import timeframe_manager, time_service, logger, timezone_service
from services.progress_service import progress_service

logger = logging.getLogger(__name__)

class AnalysisService:
    def __init__(self, price_service, time_service, timeframe_manager):
        self.price_service = price_service
        self.time_service = time_service
        self.timeframe_manager = timeframe_manager
        self.user_tasks: Dict[int, asyncio.Task] = {}
        self.last_prices: Dict[int, dict] = {}
        self.analysis_threshold = 0.01  # 1% –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞

    async def safe_send_message(self, chat_id: int, text: str, parse_mode: Optional[str] = None) -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            await bot.send_message(chat_id=chat_id, text=text, parse_mode=parse_mode)
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False

    def analyze_price_change(self, old_price: float, new_price: float) -> Optional[str]:
        """–ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã —Å –ø–æ—Ä–æ–≥–æ–º"""
        if old_price == 0 or new_price == 0:
            return None
            
        change_percent = (new_price - old_price) / old_price
        
        if change_percent >= self.analysis_threshold:
            return 'green'
        elif change_percent <= -self.analysis_threshold:
            return 'red'
        return None

    def create_message(self, symbol: str, old_price: float, new_price: float, signal: str, timeframe: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–∏–≥–Ω–∞–ª–µ"""
        change_percent = ((new_price - old_price) / old_price) * 100
        direction = "–ó–µ–ª–µ–Ω—ã–π" if signal == 'green' else "–ö—Ä–∞—Å–Ω—ã–π"
        
        return (
            f"*{symbol} - {direction} –æ—Ä–¥–µ—Ä-–±–ª–æ–∫*\n"
            f"‚Ä¢ –¢–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}\n"
            f"‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change_percent:+.2f}%\n"
            f"‚Ä¢ –¶–µ–Ω–∞: {old_price:.2f} ‚Üí {new_price:.2f}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {datetime.datetime.now().strftime('%H:%M:%S')}\n"
            f"‚Ä¢ –î–∞—Ç–∞: {datetime.datetime.now().strftime('%d.%m.%Y')}"
        )

    async def analyze_candles_with_progress(self, user_id: int):
        """–ê–Ω–∞–ª–∏–∑ —Å –∫—Ä–∞—Å–∏–≤–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        try:
            timeframe = self.timeframe_manager.get_timeframe()
            if not timeframe:
                await self.safe_send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!")
                return
            
            logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –¥–ª—è user {user_id}, TF: {timeframe}")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã
            btc_price = await self.price_service.get_binance_price_async('BTCUSDT')
            eth_price = await self.price_service.get_binance_price_async('ETHUSDT')
            
            if btc_price is None or eth_price is None:
                await self.safe_send_message(user_id, "–ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã —Å Binance")
                return
            
            self.last_prices[user_id] = {'BTCUSDT': btc_price, 'ETHUSDT': eth_price}
            
            while True:
                if asyncio.current_task().cancelled():
                    break
                
                # –ñ–¥–µ–º –≤—Ä–µ–º—è –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
                wait_time, close_time = await self.time_service.get_time_to_candle_close(timeframe)
                
                if wait_time > 0:
                    logger.info(f"–ñ–¥–µ–º {wait_time} —Å–µ–∫ –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–∏")
                    await progress_service.start_progress_animation(
                        user_id, wait_time, timeframe, close_time
                    )
                    await asyncio.sleep(wait_time)
                    await progress_service.stop_progress_animation(user_id)
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Ü–µ–Ω—ã
                new_btc = await self.price_service.get_binance_price_async('BTCUSDT')
                new_eth = await self.price_service.get_binance_price_async('ETHUSDT')
                
                if new_btc is None or new_eth is None:
                    logger.warning("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞")
                    await asyncio.sleep(5)
                    continue
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                old_btc = self.last_prices[user_id]['BTCUSDT']
                old_eth = self.last_prices[user_id]['ETHUSDT']
                
                btc_signal = self.analyze_price_change(old_btc, new_btc)
                eth_signal = self.analyze_price_change(old_eth, new_eth)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã
                self.last_prices[user_id] = {'BTCUSDT': new_btc, 'ETHUSDT': new_eth}
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –µ—Å–ª–∏ –µ—Å—Ç—å
                if btc_signal:
                    message = self.create_message('BTC', old_btc, new_btc, btc_signal, timeframe)
                    await self.safe_send_message(user_id, message, parse_mode="Markdown")
                
                if eth_signal:
                    message = self.create_message('ETH', old_eth, new_eth, eth_signal, timeframe)
                    await self.safe_send_message(user_id, message, parse_mode="Markdown")
                
                # –ï—Å–ª–∏ –±—ã–ª–∏ —Å–∏–≥–Ω–∞–ª—ã - –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑
                if btc_signal or eth_signal:
                    break
                    
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ü–∏–∫–ª–æ–º
                await asyncio.sleep(2)
                    
        except asyncio.CancelledError:
            logger.info(f"‚èπÔ∏è –ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è user {user_id}")
            await progress_service.stop_progress_animation(user_id)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–Ω–∞–ª–∏–∑–µ: {e}")
            await progress_service.stop_progress_animation(user_id)
            await self.safe_send_message(user_id, 
                "*–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞*\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–Ω–æ–≤–∞",
                parse_mode="Markdown"
            )
        finally:
            # –ß–∏—Å—Ç–∏–º –∑–∞ —Å–æ–±–æ–π
            if user_id in self.user_tasks:
                del self.user_tasks[user_id]
            if user_id in self.last_prices:
                del self.last_prices[user_id]
            await progress_service.stop_progress_animation(user_id)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä (–±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–µ–ª–∞–Ω–æ –≤ DI)
analysis_service = AnalysisService(price_service, time_service, timeframe_manager)