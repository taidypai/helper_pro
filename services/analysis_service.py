# analysis_service.py
import asyncio
from typing import Dict, Optional, List
import logging

from config import bot
from services.price_service import price_service
from services.time_utils import timeframe_manager, time_service, logger, timezone_service
from services.progress_service import progress_service
from .models import Candle

logger = logging.getLogger(__name__)
    
class AnalysisService:
    def __init__(self, price_service, time_service, timeframe_manager):
        self.price_service = price_service
        self.time_service = time_service
        self.timeframe_manager = timeframe_manager
        self.user_tasks: Dict[int, asyncio.Task] = {}
        self.candle_history: Dict[int, Dict[str, List[Candle]]] = {}
        self.active_analyses: Dict[int, bool] = {}
        self.last_prices: Dict[int, float] = {}
        self.analysis_tasks: Dict[int, Dict[str, asyncio.Task]] = {}
        self.progress_managers: Dict[int, asyncio.Task] = {}

    async def safe_send_message(self, chat_id: int, text: str, parse_mode: Optional[str] = None) -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            await bot.send_message(chat_id=chat_id, text=text, parse_mode=parse_mode)
            await asyncio.sleep(1)
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False

    def analyze_order_block(self, prev_candle: Candle, current_candle: Candle) -> Optional[str]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–≤–µ —Å–≤–µ—á–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—Ä–¥–µ—Ä–±–ª–æ–∫–∞:
        1. –°–≤–µ—á–∏ —Ä–∞–∑–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
        2. –í—Ç–æ—Ä–∞—è —Å–≤–µ—á–∞ –≤ 2+ —Ä–∞–∑–∞ –±–æ–ª—å—à–µ –ø–µ—Ä–≤–æ–π –ø–æ —Ç–µ–ª—É
        """
        if (prev_candle is None or current_candle is None or
            prev_candle.body_size == 0 or current_candle.body_size == 0):
            return None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Å–≤–µ—á–µ–π —á–µ—Ä–µ–∑ —Å–≤–æ–π—Å—Ç–≤–∞
        prev_color = prev_candle.color
        current_color = current_candle.color
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –æ—Ä–¥–µ—Ä–±–ª–æ–∫–∞
        if (prev_color != current_color and  # –†–∞–∑–Ω—ã–π —Ü–≤–µ—Ç
            current_candle.body_size >= prev_candle.body_size * 2):  # –í 2+ —Ä–∞–∑–∞ –±–æ–ª—å—à–µ
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ä–¥–µ—Ä–±–ª–æ–∫–∞
            if current_color == 'green':
                return 'buy'  # –ó–µ–ª–µ–Ω—ã–π –æ—Ä–¥–µ—Ä–±–ª–æ–∫ (–±—ã—á–∏–π)
            else:
                return 'sell' # –ö—Ä–∞—Å–Ω—ã–π –æ—Ä–¥–µ—Ä–±–ª–æ–∫ (–º–µ–¥–≤–µ–∂–∏–π)
        
        return None

    def create_order_block_message(self, symbol: str, signal: str, timeframe: str, 
                         candles: List[Candle]) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ä–¥–µ—Ä–±–ª–æ–∫–µ"""
        from services.message_utils import escape_markdown
        
        prev, current = candles
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –∏ —Ä–∞–∑–º–µ—Ä–∞
        prev_color = prev.color
        current_color = current.color
        size_ratio = current.body_size / prev.body_size
        
        direction = "üü¢ LONG" if signal == 'buy' else "üî¥ SHORT"
        block_type = "–ë—ã—á–∏–π –æ—Ä–¥–µ—Ä–±–ª–æ–∫" if signal == 'buy' else "–ú–µ–¥–≤–µ–∂–∏–π –æ—Ä–¥–µ—Ä–±–ª–æ–∫"
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        symbol_escaped = escape_markdown(symbol)
        timeframe_escaped = escape_markdown(timeframe)
        direction_escaped = escape_markdown(direction)
        block_type_escaped = escape_markdown(block_type)
        
        message = (
            f"*{symbol_escaped} - {block_type_escaped}* (x{size_ratio:.1f}) \n"
            f"‚Ä¢ –°–∏–≥–Ω–∞–ª: {direction_escaped}\n"
            f"‚Ä¢ –¢–∞–π–º—Ñ—Ä–µ–π–º: {timeframe_escaped}\n"
            f"‚Ä¢ –¶–≤–µ—Ç–∞: {escape_markdown(prev_color.upper())} ‚Üí {escape_markdown(current_color.upper())}\n"
            f"‚Ä¢ –ó–∞–∫—Ä—ã—Ç–∏–µ: {current.close:.2f}\n"
            f"\n*–í–ù–ò–ú–ê–ù–ò–ï:* –≠—Ç–æ —Ç–æ–ª—å–∫–æ —Å–∏–≥–Ω–∞–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑!"
        )
        
        return message

    async def get_candle_data(self, symbol: str, timeframe: str) -> Optional[Candle]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Å–≤–µ—á–∏"""
        try:
            if symbol == 'IMOEX':
                # –î–ª—è IMOEX –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
                imoex_data = await self.price_service.get_imoex_data()
                if imoex_data:
                    return Candle(
                        open=float(imoex_data['open']),
                        high=float(imoex_data['high']),
                        low=float(imoex_data['low']),
                        close=float(imoex_data['close']),
                        volume=float(imoex_data['volume']),
                        timestamp=imoex_data['timestamp']
                    )
            else:
                # –î–ª—è –∫—Ä–∏–ø—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º Binance
                async with self.price_service as ps:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
                    ohlc_data = await ps.get_binance_ohlc_async(symbol, timeframe)
                    if ohlc_data:
                        return Candle(
                            open=float(ohlc_data['open']),
                            high=float(ohlc_data['high']),
                            low=float(ohlc_data['low']),
                            close=float(ohlc_data['close']),
                            volume=float(ohlc_data['volume']),
                            timestamp=ohlc_data['timestamp']
                        )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–∏ {symbol}: {e}")
        
        return None
    
    async def initialize_candle_history(self, user_id: int, symbols: List[str], timeframe: str):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–≤–µ—á–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.candle_history:
            self.candle_history[user_id] = {}
        
        for symbol in symbols:
            if symbol not in self.candle_history[user_id]:
                self.candle_history[user_id][symbol] = []
                
                for _ in range(2):
                    candle = await self.get_candle_data(symbol, timeframe)
                    if candle:
                        self.candle_history[user_id][symbol].append(candle)
                
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.candle_history[user_id][symbol])} —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")

    async def manage_progress(self, user_id: int, timeframe: str):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º (–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑)"""
        try:
            while self.active_analyses.get(user_id, False):
                wait_time, close_time = await self.time_service.get_time_to_candle_close(timeframe)
                
                if wait_time > 0:
                    logger.info(f"–ñ–¥–µ–º {wait_time} —Å–µ–∫ –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–∏ {timeframe}")
                    await progress_service.start_progress_animation(
                        user_id, wait_time, timeframe, close_time
                    )
                    await asyncio.sleep(wait_time)
                    await progress_service.stop_progress_animation(user_id)
                
                await asyncio.sleep(1)
                    
        except asyncio.CancelledError:
            logger.info(f"‚èπÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è user {user_id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º: {e}")

    async def analyze_symbol(self, user_id: int, symbol: str, timeframe: str):
        """–ê–Ω–∞–ª–∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–∏)"""
        try:
            logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ {symbol} –¥–ª—è user {user_id}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
            if user_id not in self.candle_history:
                self.candle_history[user_id] = {}
            if symbol not in self.candle_history[user_id]:
                self.candle_history[user_id][symbol] = []
                # –ó–∞–≥—Ä—É–∂–∞–µ–º 2 –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–≤–µ—á–∏
                for _ in range(2):
                    candle = await self.get_candle_data(symbol, timeframe)
                    if candle:
                        self.candle_history[user_id][symbol].append(candle)
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞
            while self.active_analyses.get(user_id, False):
                if asyncio.current_task().cancelled():
                    break
                
                # –ñ–¥–µ–º –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–ª–µ–¥—É—é—â–µ–π —Å–≤–µ—á–∏
                wait_time, close_time = await self.time_service.get_time_to_candle_close(timeframe)
                if wait_time > 0:
                    logger.info(f"–ñ–¥–µ–º {wait_time} —Å–µ–∫ –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–∏ {timeframe}")
                    await asyncio.sleep(wait_time)
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Å–≤–µ—á—É
                new_candle = await self.get_candle_data(symbol, timeframe)
                
                if not new_candle:
                    logger.warning(f"{symbol}: –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏")
                    continue
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é (–¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é)
                history = self.candle_history[user_id][symbol]
                history.append(new_candle)
                
                # –î–µ—Ä–∂–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å–≤–µ—á–∏
                if len(history) > 2:
                    history.pop(0)
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–≤–µ—á–∏
                if len(history) >= 2:
                    prev_candle, current_candle = history[-2], history[-1]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–≤–µ—á–∏ —Ä–∞–∑–Ω—ã–µ (–Ω–µ –¥—É–±–ª–∏–∫–∞—Ç—ã)
                    if prev_candle.timestamp != current_candle.timestamp:
                        # –ò—â–µ–º –æ—Ä–¥–µ—Ä–±–ª–æ–∫
                        signal = self.analyze_order_block(prev_candle, current_candle)
                        
                        if signal:
                            logger.info(f"–ù–∞–π–¥–µ–Ω –æ—Ä–¥–µ—Ä–±–ª–æ–∫ {symbol}: {signal}")
                            
                            message = self.create_order_block_message(
                                symbol, signal, timeframe, [prev_candle, current_candle]
                            )
                            await self.safe_send_message(user_id, message, parse_mode="Markdown")
                    
        except asyncio.CancelledError:
            logger.info(f"‚èπÔ∏è –ê–Ω–∞–ª–∏–∑ {symbol} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è user {user_id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–Ω–∞–ª–∏–∑–µ {symbol}: {e}")

    async def analyze_candles_with_progress(self, user_id: int):
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç –¥–æ –∫–æ–º–∞–Ω–¥—ã stop)"""
        try:
            timeframe = self.timeframe_manager.get_timeframe()
            if not timeframe:
                await self.safe_send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!")
                return
            
            symbols = ['BTCUSDT', 'ETHUSDT', 'IMOEX']
            self.active_analyses[user_id] = True
            
            logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ä–¥–µ—Ä–±–ª–æ–∫–æ–≤ –¥–ª—è user {user_id}, TF: {timeframe}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
            self.progress_managers[user_id] = asyncio.create_task(
                self.manage_progress(user_id, timeframe)
            )
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
            self.analysis_tasks[user_id] = {}
            for symbol in symbols:
                task = asyncio.create_task(self.analyze_symbol(user_id, symbol, timeframe))
                self.analysis_tasks[user_id][symbol] = task
            
            # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ –∂–¥–µ–º, –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
            while self.active_analyses.get(user_id, False):
                await asyncio.sleep(1)
                    
        except asyncio.CancelledError:
            logger.info(f"‚èπÔ∏è –ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è user {user_id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–Ω–∞–ª–∏–∑–µ –æ—Ä–¥–µ—Ä–±–ª–æ–∫–æ–≤: {e}")
            await self.safe_send_message(user_id, 
                "*–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞*\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–Ω–æ–≤–∞",
                parse_mode="Markdown"
            )
        finally:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
            if user_id in self.progress_managers:
                self.progress_managers[user_id].cancel()
                try:
                    await self.progress_managers[user_id]
                except:
                    pass
                del self.progress_managers[user_id]
            
            if user_id in self.analysis_tasks:
                for task in self.analysis_tasks[user_id].values():
                    task.cancel()
                del self.analysis_tasks[user_id]
            
            # –ß–∏—Å—Ç–∏–º –∑–∞ —Å–æ–±–æ–π
            if user_id in self.candle_history:
                del self.candle_history[user_id]
            if user_id in self.active_analyses:
                del self.active_analyses[user_id]
            await progress_service.stop_progress_animation(user_id)

    def stop_analysis(self, user_id: int):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id in self.active_analyses:
            self.active_analyses[user_id] = False
            logger.info(f"‚èπÔ∏è –ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –∫–æ–º–∞–Ω–¥–µ –¥–ª—è user {user_id}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
analysis_service = AnalysisService(price_service, time_service, timeframe_manager)