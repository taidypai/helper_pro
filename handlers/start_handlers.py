from aiogram.filters import Command, CommandStart
from aiogram import types, Router
import asyncio
import logging

from config import bot, subscribed_users
from services.message_utils import edit_navigation_message
import keyboards
from services.trade_calculator import trade_calculator
from services.state_service import state_service

logger = logging.getLogger(__name__)
start_router = Router()

@start_router.message(CommandStart())
async def handle_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user_id = message.from_user.id
        subscribed_users.add(user_id)

        welcome_text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç–∫–æ—Å–∏—Å—Ç–µ–º—É *Trade & Brain*!"
        await message.answer(welcome_text, reply_markup=keyboards.start_keyboard(), parse_mode='Markdown')
        await asyncio.sleep(2)

    except Exception as e:
        logger.error(f"Error in start handler: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞")

@start_router.message(Command("calculate"))
async def start_calculation_command(message: types.Message):
    """–ó–∞–ø—É—Å–∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏"""
    try:
        user_id = message.from_user.id
        
        if user_id in state_service.user_states:
            del state_service.user_states[user_id]
        if user_id in state_service.user_calculation_data:
            del state_service.user_calculation_data[user_id]
        
        nav_message = await message.answer(
            "*–ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –ü–û–ó–ò–¶–ò–ò*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏:",
            reply_markup=keyboards.lot_keyboard(),
            parse_mode="Markdown"
        )
        
        state_service.set_navigation_id(user_id, nav_message.message_id)
        
        try:
            await message.delete()
        except:
            pass
            
    except Exception as e:
        logger.error(f"Error starting calculation: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞")

@start_router.message(Command("trade"))
async def start_analysis_command(message: types.Message):
    """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Å –∫—Ä–∞—Å–∏–≤–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π"""
    from config import running_analyses
    from services.analysis_service import analysis_service
    from services.time_utils import timeframe_manager
    
    user_id = message.from_user.id
    
    if user_id in running_analyses:
        await message.answer("‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ —É–∂–µ –∑–∞–ø—É—â–µ–Ω! /stop —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        return
    
    timeframe = timeframe_manager.get_timeframe()
    if not timeframe:
        await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!")
        return
    
    task = asyncio.create_task(analysis_service.analyze_candles_with_progress(user_id))
    running_analyses[user_id] = task
    analysis_service.user_tasks[user_id] = task
    await message.answer(
        "||–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ ‚Üí /stop||",
        parse_mode="MarkdownV2"
    )
    await asyncio.sleep(1)

@start_router.message(Command("stop"))
async def stop_analysis(message: types.Message):
    """–ü—Ä–æ–≤–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞"""
    from config import running_analyses
    from services.analysis_service import analysis_service
    
    user_id = message.from_user.id
    
    if user_id in running_analyses:
        running_analyses[user_id].cancel()
        try:
            await running_analyses[user_id]
        except:
            pass
        del running_analyses[user_id]
        
        if user_id in analysis_service.user_tasks:
            del analysis_service.user_tasks[user_id]
        if user_id in analysis_service.last_prices:
            del analysis_service.last_prices[user_id]
        
        await message.answer("–ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    else:
        await message.answer("–ê–Ω–∞–ª–∏–∑ –Ω–µ –∑–∞–ø—É—â–µ–Ω")

@start_router.message(Command("default"))
async def handle_default_risk(message: types.Message):
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∏—Å–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    user_id = message.from_user.id
    
    if user_id not in state_service.user_states:
        return
    
    user_state = state_service.user_states[user_id]
    if user_state.get('waiting_for') != 'risk_percent':
        return
    
    state_service.user_calculation_data[user_id]['risk_percent'] = 0.005
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
    await _calculate_and_show_trade(user_id)
    
    try:
        await asyncio.sleep(2)
        await message.delete()
    except:
        pass

async def _calculate_and_show_trade(user_id: int):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–¥–µ–ª–∫–∏"""
    from services.message_utils import edit_navigation_message
    import keyboards
    
    try:
        user_data = state_service.user_calculation_data.get(user_id, {})
        
        if not all(key in user_data for key in ['direction', 'balance', 'entry_price', 'stop_loss', 'risk_reward', 'risk_percent']):
            await edit_navigation_message(
                user_id,
                "‚ùå –ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                keyboards.lot_keyboard(),
                "Markdown"
            )
            return
        
        result = trade_calculator.calculate_trade(user_data)
        
        if 'error' in result:
            await edit_navigation_message(
                user_id,
                f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {result['error']}",
                keyboards.lot_keyboard(),
                "Markdown"
            )
            return
        
        state_service.user_calculation_data[user_id]['result'] = result
        trade = result['success']
        
        brief_message = (
            f"*–†–ê–°–ß–ï–¢ –ü–û–ó–ò–¶–ò–ò –ó–ê–í–ï–†–®–ï–ù*\n\n"
            f"‚Ä¢ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {trade.direction.upper()}\n"
            f"‚Ä¢ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${trade.entry_price:.2f}\n"
            f"‚Ä¢ –°—Ç–æ–ø-–ª–æ—Å—Å: ${trade.stop_loss:.2f}\n"
            f"‚Ä¢ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: ${trade.take_profit:.2f}\n\n"
            f"üí° *–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:*\n"
            f"‚Ä¢ –û–±—ä–µ–º: {trade_calculator.format_volume(trade.volume)}\n"
            f"‚Ä¢ –ü–ª–µ—á–æ: x{trade.required_leverage:.2f}\n"
            f"‚Ä¢ –†–∏—Å–∫: ${trade.risk_money:.2f} ({trade.risk_percent*100:.1f}%)\n\n"
            f"–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: ${trade.potential_profit:.2f}"
        )
        
        await edit_navigation_message(
            user_id,
            brief_message,
            keyboards.trade_details_keyboard(),
            "Markdown"
        )
        
        if user_id in state_service.user_states:
            del state_service.user_states[user_id]
            
    except Exception as e:
        logger.error(f"Error calculating trade: {e}")
        await edit_navigation_message(
            user_id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ø–æ–∑–∏—Ü–∏–∏",
            keyboards.lot_keyboard(),
            "Markdown"
        )
        
        if user_id in state_service.user_states:
            del state_service.user_states[user_id]