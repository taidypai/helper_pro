from aiogram import Router, F
from aiogram.types import CallbackQuery
import logging

from services.message_utils import edit_navigation_message
from services.state_service import state_service
from services.trade_calculator import trade_calculator
import keyboards

logger = logging.getLogger(__name__)
trade_router = Router()

@trade_router.callback_query(F.data == "lot")
async def handle_lot_callback(callback: CallbackQuery):
    try:
        user_id = callback.from_user.id
        
        state_service.set_navigation_id(user_id, callback.message.message_id)
        
        await edit_navigation_message(
            user_id,
            '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
            keyboards.lot_keyboard(),
            None
        )
        
    except Exception as e:
        logger.error(f"Error in lot callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞")

@trade_router.callback_query(F.data.in_(["long", "short"]))
async def handle_direction_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏"""
    try:
        user_id = callback.from_user.id
        direction = callback.data
        
        state_service.set_navigation_id(user_id, callback.message.message_id)
        
        if user_id not in state_service.user_calculation_data:
            state_service.user_calculation_data[user_id] = {}
        state_service.user_calculation_data[user_id]['direction'] = direction
        
        state_service.user_states[user_id] = {'waiting_for': 'balance'}
        
        await edit_navigation_message(
            user_id,
            f"üìä *–†–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ - {direction.upper()}*\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –±–∞–ª–∞–Ω—Å –≤ USDT:",
            keyboards.cancel_keyboard(),
            "Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in direction selection: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@trade_router.callback_query(F.data == "cancel_trade")
async def handle_cancel_trade(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—á–µ—Ç–∞"""
    try:
        user_id = callback.from_user.id
        
        if user_id in state_service.user_states:
            del state_service.user_states[user_id]
        if user_id in state_service.user_calculation_data:
            del state_service.user_calculation_data[user_id]
        
        await edit_navigation_message(
            user_id,
            '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
            keyboards.lot_keyboard(),
            None
        )
        
    except Exception as e:
        logger.error(f"Error canceling trade: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@trade_router.callback_query(F.data == "trade_details")
async def handle_trade_details(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–µ"""
    try:
        user_id = callback.from_user.id
        
        user_data = state_service.user_calculation_data.get(user_id, {})
        if 'result' not in user_data:
            await callback.answer("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return
        
        result = user_data['result']
        trade = result['success']
        
        detailed_message = (
            f"*–î–ï–¢–ê–õ–¨–ù–´–ô –†–ê–°–ß–ï–¢ –ü–û–ó–ò–¶–ò–ò*\n\n"
            f"‚Ä¢ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {trade.direction.upper()}\n"
            f"‚Ä¢ –ë–∞–ª–∞–Ω—Å: ${trade.balance:.2f}\n"
            f"‚Ä¢ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${trade.entry_price:.2f}\n"
            f"‚Ä¢ –°—Ç–æ–ø-–ª–æ—Å—Å: ${trade.stop_loss:.2f}\n"
            f"‚Ä¢ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: ${trade.take_profit:.2f}\n"
            f"‚Ä¢ –†–∏—Å–∫/–ü—Ä–∏–±—ã–ª—å: 1:{trade.risk_reward_ratio}\n"
            f"‚Ä¢ –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: {trade.risk_percent*100:.1f}% (${trade.risk_money:.2f})\n\n"
            f"*–ü–ê–†–ê–ú–ï–¢–†–´ –ü–û–ó–ò–¶–ò–ò:*\n"
            f"‚Ä¢ –ò–¥–µ–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º: {trade_calculator.format_volume(trade.volume)}\n"
            f"‚Ä¢ –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ–±—ä–µ–º: {trade_calculator.format_volume(trade.adjusted_volume)}\n"
            f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏: ${trade.position_value:.2f}\n"
            f"‚Ä¢ –ü–ª–µ—á–æ: x{trade_calculator.format_leverage(trade.adjusted_leverage)}\n"
            f"‚Ä¢ –î–∏—Å—Ç–∞–Ω—Ü–∏—è —Ä–∏—Å–∫–∞: {trade.risk_distance_percent:.2f}%\n\n"
            f"*–ü–û–¢–ï–ù–¶–ò–ê–õ:*\n"
            f"‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫: ${trade.potential_loss:.2f}\n"
            f"‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: ${trade.potential_profit:.2f}\n\n"
            f"*–í–ù–ò–ú–ê–ù–ò–ï:* –û–±—ä–µ–º –æ–∫—Ä—É–≥–ª–µ–Ω –¥–æ 4 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π"
        )
        
        await edit_navigation_message(
            user_id,
            detailed_message,
            keyboards.back_to_trade_keyboard(),
            "Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error showing trade details: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@trade_router.callback_query(F.data == "trade_brief")
async def handle_trade_brief(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫—Ä–∞—Ç–∫–æ–º—É –≤–∏–¥—É"""
    try:
        user_id = callback.from_user.id
        
        user_data = state_service.user_calculation_data.get(user_id, {})
        if 'result' not in user_data:
            await callback.answer("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return
        
        result = user_data['result']
        trade = result['success']
        
        brief_message = (
            f"*–†–ê–°–ß–ï–¢ –ü–û–ó–ò–¶–ò–ò –ó–ê–í–ï–†–®–ï–ù*\n\n"
            f"‚Ä¢ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {trade.direction.upper()}\n"
            f"‚Ä¢ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${trade.entry_price:.2f}\n"
            f"‚Ä¢ –°—Ç–æ–ø-–ª–æ—Å—Å: ${trade.stop_loss:.2f}\n"
            f"‚Ä¢ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: ${trade.take_profit:.2f}\n\n"
            f"*–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:*\n"
            f"‚Ä¢ –û–±—ä–µ–º: {trade_calculator.format_volume(trade.volume)}\n"
            f"‚Ä¢ –ü–ª–µ—á–æ: x{trade.required_leverage:.2f}\n"
            f"‚Ä¢ –†–∏—Å–∫: ${trade.risk_money:.2f} ({trade.risk_percent*100:.1f}%)\n\n"
            f"–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: ${trade.potential_profit:.2f}"
        )
        
        await edit_navigation_message(
            user_id,
            brief_message,
            keyboards.trade_details_keyboard(),
            "Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error showing trade brief: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@trade_router.callback_query(F.data == "new_trade")
async def handle_new_trade(callback: CallbackQuery):
    """–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç"""
    try:
        user_id = callback.from_user.id
        
        if user_id in state_service.user_calculation_data:
            del state_service.user_calculation_data[user_id]
        if user_id in state_service.user_states:
            del state_service.user_states[user_id]
        
        await edit_navigation_message(
            user_id,
            "*–ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –ü–û–ó–ò–¶–ò–ò*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏:",
            keyboards.lot_keyboard(),
            "Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error starting new trade: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")